[tool.poetry]
name = "locallibrary-frontend"
version = "1.0.0"
description = ""
authors = ["Uchechukwu Orji <orjiuchechukwu52@yahoo.com>"]
readme = "README.md"
packages = [{include = "locallibrary_frontend", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
fastapi = {extras = ["all"], version = "^0.115.0"}
alembic = "^1.13.2"
sqlalchemy = "^2.0.35"
psycopg = {extras = ["binary", "pool"], version = "^3.2.2"}
pydantic = "^2.9.2"
grpcio = "^1.66.1"
protobuf = "^5.28.2"
grpc-interceptor = "^0.15.4"
locallibrary-frontend-grpc = {git = "https://github.com/elfkuzco/locallibrary.git", rev = "grpc/python/frontend/v1.0.0"}
aiohttp = "^3.11.11"
pyjwt = {extras = ["crypto"], version = "^2.10.1"}
humanfriendly = "^10.0"


[tool.poetry.group.dev.dependencies]
black = "^24.8.0"
ruff = "^0.6.5"
pyright = "^1.1.381"
pre-commit = "^3.8.0"
flake8 = "^7.1.1"
isort = "^5.13.2"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
faker = "^28.4.1"
pytest-cov = "^5.0.0"

[tool.poetry.scripts]
locallibrary-frontend-grpc-server = "locallibrary_frontend.grpc_server:serve"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
  "A",  # flake8-builtins
  # "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  # "ASYNC",  # flake8-async
  "B",  # flake8-bugbear
  # "BLE",  # flake8-blind-except
  "C4",  # flake8-comprehensions
  "C90",  # mccabe
  # "COM",  # flake8-commas
  # "D",  # pydocstyle
  # "DJ",  # flake8-django
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle (default)
  "EM",  # flake8-errmsg
  # "ERA",  # eradicate
  # "EXE",  # flake8-executable
  "F",  # Pyflakes (default)
  # "FA",  # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  # "FLY",  # flynt
  # "G",  # flake8-logging-format
  "I",  # isort
  "ICN",  # flake8-import-conventions
  # "INP",  # flake8-no-pep420
  # "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "N",  # pep8-naming
  # "NPY",  # NumPy-specific rules
  # "PD",  # pandas-vet
  # "PGH",  # pygrep-hooks
  # "PIE",  # flake8-pie
  # "PL",  # Pylint
  "PLC",  # Pylint: Convention
  "PLE",  # Pylint: Error
  "PLR",  # Pylint: Refactor
  "PLW",  # Pylint: Warning
  # "PT",  # flake8-pytest-style
  # "PTH",  # flake8-use-pathlib
  # "PYI",  # flake8-pyi
  "Q",  # flake8-quotes
  # "RET",  # flake8-return
  # "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",  # flake8-bandit
  # "SIM",  # flake8-simplify
  # "SLF",  # flake8-self
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  # "TCH",  # flake8-type-checking
  # "TD",  # flake8-todos
  "TID",  # flake8-tidy-imports
  # "TRY",  # tryceratops
  "UP",  # pyupgrade
  "W",  # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Remove flake8-errmsg since we consider they bloat the code and provide limited value
  "EM",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore warnings on subprocess.run / popen
  "S603",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore warnings on missing timezone info
  "DTZ005", "DTZ001", "DTZ006",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["locallibrary_frontend"]

[tool.ruff.lint.flake8-bugbear]
# add exceptions to B008 for fastapi.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pytest.ini_options]
minversion = "7.3"
testpaths = ["tests"]
pythonpath = [".", "src"]
addopts = "--strict-markers"
markers = [
    "num_users(num=10): create num (default: 10) users in the database.",
    "num_books(num=10): create num (default: 10) books in the database.",
]

[tool.pyright]
include = ["src", "tests"]
exclude = [".env/**", ".venv/**"]
extraPaths = ["src"]
pythonVersion = "3.12"
typeCheckingMode="strict"
disableBytesTypePromotions = true
