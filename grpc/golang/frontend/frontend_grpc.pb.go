// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/frontend/frontend.proto

package frontend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocalLibraryFrontend_AddBook_FullMethodName           = "/LocalLibraryFrontend/AddBook"
	LocalLibraryFrontend_RemoveBook_FullMethodName        = "/LocalLibraryFrontend/RemoveBook"
	LocalLibraryFrontend_GetUser_FullMethodName           = "/LocalLibraryFrontend/GetUser"
	LocalLibraryFrontend_ListBorrowedBooks_FullMethodName = "/LocalLibraryFrontend/ListBorrowedBooks"
	LocalLibraryFrontend_ListUsers_FullMethodName         = "/LocalLibraryFrontend/ListUsers"
)

// LocalLibraryFrontendClient is the client API for LocalLibraryFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalLibraryFrontendClient interface {
	// Add a book to the library
	AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*BookDetail, error)
	// Remove a book from the library
	RemoveBook(ctx context.Context, in *RemoveBookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get a user and the books that they have borrowed
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserDetail, error)
	// List borrowed books
	ListBorrowedBooks(ctx context.Context, in *ListGenericResourceRequest, opts ...grpc.CallOption) (*BookList, error)
	// List users enrolled in the library.
	ListUsers(ctx context.Context, in *ListGenericResourceRequest, opts ...grpc.CallOption) (*UserList, error)
}

type localLibraryFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalLibraryFrontendClient(cc grpc.ClientConnInterface) LocalLibraryFrontendClient {
	return &localLibraryFrontendClient{cc}
}

func (c *localLibraryFrontendClient) AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*BookDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookDetail)
	err := c.cc.Invoke(ctx, LocalLibraryFrontend_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localLibraryFrontendClient) RemoveBook(ctx context.Context, in *RemoveBookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LocalLibraryFrontend_RemoveBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localLibraryFrontendClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetail)
	err := c.cc.Invoke(ctx, LocalLibraryFrontend_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localLibraryFrontendClient) ListBorrowedBooks(ctx context.Context, in *ListGenericResourceRequest, opts ...grpc.CallOption) (*BookList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookList)
	err := c.cc.Invoke(ctx, LocalLibraryFrontend_ListBorrowedBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localLibraryFrontendClient) ListUsers(ctx context.Context, in *ListGenericResourceRequest, opts ...grpc.CallOption) (*UserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserList)
	err := c.cc.Invoke(ctx, LocalLibraryFrontend_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalLibraryFrontendServer is the server API for LocalLibraryFrontend service.
// All implementations must embed UnimplementedLocalLibraryFrontendServer
// for forward compatibility.
type LocalLibraryFrontendServer interface {
	// Add a book to the library
	AddBook(context.Context, *AddBookRequest) (*BookDetail, error)
	// Remove a book from the library
	RemoveBook(context.Context, *RemoveBookRequest) (*emptypb.Empty, error)
	// Get a user and the books that they have borrowed
	GetUser(context.Context, *GetUserRequest) (*UserDetail, error)
	// List borrowed books
	ListBorrowedBooks(context.Context, *ListGenericResourceRequest) (*BookList, error)
	// List users enrolled in the library.
	ListUsers(context.Context, *ListGenericResourceRequest) (*UserList, error)
	mustEmbedUnimplementedLocalLibraryFrontendServer()
}

// UnimplementedLocalLibraryFrontendServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocalLibraryFrontendServer struct{}

func (UnimplementedLocalLibraryFrontendServer) AddBook(context.Context, *AddBookRequest) (*BookDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedLocalLibraryFrontendServer) RemoveBook(context.Context, *RemoveBookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBook not implemented")
}
func (UnimplementedLocalLibraryFrontendServer) GetUser(context.Context, *GetUserRequest) (*UserDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedLocalLibraryFrontendServer) ListBorrowedBooks(context.Context, *ListGenericResourceRequest) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBorrowedBooks not implemented")
}
func (UnimplementedLocalLibraryFrontendServer) ListUsers(context.Context, *ListGenericResourceRequest) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedLocalLibraryFrontendServer) mustEmbedUnimplementedLocalLibraryFrontendServer() {}
func (UnimplementedLocalLibraryFrontendServer) testEmbeddedByValue()                              {}

// UnsafeLocalLibraryFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalLibraryFrontendServer will
// result in compilation errors.
type UnsafeLocalLibraryFrontendServer interface {
	mustEmbedUnimplementedLocalLibraryFrontendServer()
}

func RegisterLocalLibraryFrontendServer(s grpc.ServiceRegistrar, srv LocalLibraryFrontendServer) {
	// If the following call pancis, it indicates UnimplementedLocalLibraryFrontendServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocalLibraryFrontend_ServiceDesc, srv)
}

func _LocalLibraryFrontend_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLibraryFrontendServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLibraryFrontend_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLibraryFrontendServer).AddBook(ctx, req.(*AddBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalLibraryFrontend_RemoveBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLibraryFrontendServer).RemoveBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLibraryFrontend_RemoveBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLibraryFrontendServer).RemoveBook(ctx, req.(*RemoveBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalLibraryFrontend_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLibraryFrontendServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLibraryFrontend_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLibraryFrontendServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalLibraryFrontend_ListBorrowedBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGenericResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLibraryFrontendServer).ListBorrowedBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLibraryFrontend_ListBorrowedBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLibraryFrontendServer).ListBorrowedBooks(ctx, req.(*ListGenericResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalLibraryFrontend_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGenericResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLibraryFrontendServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLibraryFrontend_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLibraryFrontendServer).ListUsers(ctx, req.(*ListGenericResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalLibraryFrontend_ServiceDesc is the grpc.ServiceDesc for LocalLibraryFrontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalLibraryFrontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LocalLibraryFrontend",
	HandlerType: (*LocalLibraryFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _LocalLibraryFrontend_AddBook_Handler,
		},
		{
			MethodName: "RemoveBook",
			Handler:    _LocalLibraryFrontend_RemoveBook_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _LocalLibraryFrontend_GetUser_Handler,
		},
		{
			MethodName: "ListBorrowedBooks",
			Handler:    _LocalLibraryFrontend_ListBorrowedBooks_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _LocalLibraryFrontend_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/frontend/frontend.proto",
}
